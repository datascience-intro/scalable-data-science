// Databricks notebook source
// MAGIC %md
// MAGIC # Retrospective Augmentation through userTimeLines of the Seed Set
// MAGIC 
// MAGIC ### Olof - Raaz is taking care of this, so just ignore this and focus on the other notebook in this folder for visualisation

// COMMAND ----------

// SOME IMPORTTS
import scala.collection.mutable.ArrayBuffer
import twitter4j._
import twitter4j.conf._
import scala.collection.JavaConverters._ 

import org.apache.spark.sql.Row;
import org.apache.spark.sql.types.{StructType, StructField, StringType};
import twitter4j.RateLimitStatus;
import twitter4j.ResponseList;
import com.google.gson.Gson
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._
import com.google.gson.Gson
import org.apache.spark.sql.DataFrame


// COMMAND ----------

// Olof's credentials:
val consumerKey       = "fGeNVf4GzVnuBgqq26dwhPs8E"
val consumerSecret    = "oP9yHASkB9XcRJAJLHJjmcKSV7F8jTrRH6KGR7LmWKC9qSRn1o"
val token             = "976392982042759169-kp2fYHMCF1flyKQo8yuhSHKISwv4jgf"
val tokenSecret       = "IPPvpoLqjw5pE5k11aycZnJHDFUIwoPXIitj0CV8laR7w"

val cb = new ConfigurationBuilder()       

val twitter = {
  val c = new ConfigurationBuilder
    c.setDebugEnabled(false)
    .setOAuthConsumerKey(consumerKey)
    .setOAuthConsumerSecret(consumerSecret)
    .setOAuthAccessToken(token)
    .setOAuthAccessTokenSecret(tokenSecret);

  new TwitterFactory(c.build()).getInstance()
}

// COMMAND ----------

twitter.showUser("@realDonaldTrump").getId() // quick test that REST API works - should get 4173723312

// COMMAND ----------

// this is the cleaned version of the latest shared google sheet with Mattias, Emin and Almas's list of SE extremists and SE MPs
import scala.collection.mutable.ListBuffer
val TwitterIdsCsv = sqlContext.read.format("com.databricks.spark.csv")
                        .option("header", "false")
                        .option("inferSchema", "true")
                        .load("/FileStore/tables/twitterAccountsOfInterest.csv")// including SE-MPs
                        .select($"_c1").filter($"_c1".contains("@"))
                        .rdd.map({case Row(val1: String) => val1}).map(sn => sn.replaceAll("@",""))
                        .collect().to[ListBuffer]
                        .distinct

// COMMAND ----------

TwitterIdsCsv.size // total number of seed accounts of interest

// COMMAND ----------

//val sns = List("raazozone","olofbjorck","jhdfkuhdkjfhiuyewuhwqori566")

// COMMAND ----------

def lookupUserSNs(Retweeterids:Seq[String])={
  val grouped=Retweeterids.grouped(100).toList 
  for {group<-grouped  
       users=twitter.lookupUsers(group:_*)
       user<-users.asScala 
   } yield user     
}// we loose some suspended accounts...

def lookupUsers(Retweeterids:Seq[Long])={
  val grouped=Retweeterids.grouped(100).toList 
  for {group<-grouped  
       users=twitter.lookupUsers(group:_*)
       user<-users.asScala 
   } yield user     
}// we loose some suspended accounts...

// COMMAND ----------

val seedUsers = lookupUserSNs(TwitterIdsCsv)

// COMMAND ----------

println(seedUsers.size, TwitterIdsCsv.size) // we have lost a 20 users due to suspended accounts perhaps...
// for retro-augment 0 = (860,880) with list below named seedIDs0_20180322 
// for retro-augment 1 = (858,881)

// COMMAND ----------

val seedIDs = seedUsers.map(u => u.getId()).toSet.toSeq.filter(_ != null) // just get the IDs of the seed users who are valid

// COMMAND ----------

println(seedIDs.size, seedIDs.distinct.size)

// COMMAND ----------

display(dbutils.fs.ls("dbfs:/datasets/MEP/SE/RetrospectiveMany/"))

// COMMAND ----------

// dont do this!
//dbutils.fs.rm("dbfs:/datasets/MEP/SE/RetrospectiveMany/",recurse=true)

// COMMAND ----------

// retro-augment second time with 1
val dirName = "dbfs:/datasets/MEP/SE/RetrospectiveMany1/" // seeded by 860 SE MPs And Extremists

// COMMAND ----------

case class UserTimeLineStatus(userID: Long, status: twitter4j.Status)

def WriteToParquet(tweetsAllUsers: scala.collection.mutable.Buffer[UserTimeLineStatus], dirName: String, rep: String ) = {
              if( tweetsAllUsers.size > 0) {
                val tweetsOfUserId = sc.parallelize(tweetsAllUsers)
              //
               // if(writeToHDFS){
               val userIdAndStatusJsonString = tweetsOfUserId.map(x => { val gson = new Gson();
                                                               val toJson=  gson.toJson(x.status);
                                                               (x.userID, x.status.getId() , toJson)
                                                             }
                                                        ).toDF("timeLineUserId", "TweetId", "statusJsonString")     
                userIdAndStatusJsonString.write.mode(SaveMode.Append).parquet(dirName + rep.toString() + "/" ) 
              }
}

// COMMAND ----------

//dbutils.fs.rm(dirName + "alreadyDownloadedIDs" + "/", recurse=true)
//val alreadyDownloaded = sqlContext.read.parquet(dirName + "alreadyDownloadedIDs" + "/").collect().map{case Row(userId: Long) => userId}.toSeq

// COMMAND ----------

//this is a hack around the append operatoons of parquet making slow reading of DF
//val alreadyDownloadedDF = sc.parallelize(alreadyDownloaded).toDF("userId")
//alreadyDownloadedDF.write.mode(SaveMode.Overwrite).parquet(dirName + "alreadyDownloadedIDs" + "/" )

// COMMAND ----------

//val whatNeedsToBeDownloaded = seedIDs.toSet.diff(alreadyDownloaded.toSet).toSeq.filter(_ != null)

// COMMAND ----------

// MAGIC %md
// MAGIC Now we are taking the set difference of the current downloaded histories and the new ones we want

// COMMAND ----------

val whatNeedsToBeDownloaded = seedIDs.toSet.diff(seedIDs0_20180322.toSet).toSeq.filter(_ != null)

// COMMAND ----------

println(whatNeedsToBeDownloaded.size, seedIDs.size)

// COMMAND ----------

dirName

// COMMAND ----------

whatNeedsToBeDownloaded

// COMMAND ----------

twitter.showUser("@realDonaldTrump").getId() // quick test that REST API works - should get 568088930

// COMMAND ----------

// an unresolved nullpointerexception bug - but all works agin from the point it breaks by updating whatNeedsToBeDownloaded in above three cells and then this one
val tweetsAllUsers = scala.collection.mutable.Buffer[UserTimeLineStatus]()
tweetsAllUsers.clear
var rep = 0
whatNeedsToBeDownloaded.foreach(t => {
   val maxNumOfTweets = 200
   var lastPage = 1
   val firstPage = 1
   val userTwitterID = t
   val twitterUser = twitter.showUser(userTwitterID)
   val numberOfTweets = twitterUser.getStatusesCount()
   
   if( numberOfTweets >= 3200) { lastPage = 16 } 
    else if (numberOfTweets % maxNumOfTweets > 0 ){lastPage = 1 + (numberOfTweets / maxNumOfTweets)}
    else {lastPage = (numberOfTweets / maxNumOfTweets)}
  // getUserTimeLine(userTwitterID,firstPage,lastPage,maxNumOfTweets)
  var currentPage = firstPage
  if (twitterUser != null && !twitterUser.isProtected() && twitterUser.getStatusesCount() > 10 && twitterUser.getId() != null) {
      while ( currentPage != lastPage) { 
  
                val page = new Paging(currentPage, numberOfTweets);
        /////////////////////////
        try {
            val status = twitter.getUserTimeline(userTwitterID, page)
            if (status != null) {
              val xx =  status.asScala.map(x => UserTimeLineStatus(userTwitterID, x))
              tweetsAllUsers ++= xx
            }

            if (status.getRateLimitStatus().getRemaining() < 2) {
              val waitTime = status.getRateLimitStatus().getSecondsUntilReset + 10
              println("Waiting " + waitTime + " seconds ( "
                + waitTime/60.0 + " minutes) for rate limit reset.")
              Thread.sleep(waitTime*1000)
            }
          }
          catch {
            case te: TwitterException =>
            println("Failed to search tweets") //+ te.getMessage)
          }
         if(tweetsAllUsers.size > 10000){
           rep=rep+1
           WriteToParquet(tweetsAllUsers, dirName, rep.toString() )
           tweetsAllUsers.clear
          }
        currentPage = currentPage + 1
      }
    // write what you finished cleanly
    val justDownloaded = sc.parallelize(Seq(userTwitterID)).toDF("userId")
    justDownloaded.write.mode(SaveMode.Append).parquet(dirName + "alreadyDownloadedIDs" + "/" )
  }
}
)
WriteToParquet(tweetsAllUsers, dirName, rep.toString() )

// COMMAND ----------

//Waiting 299 seconds ( 4.983333333333333 minutes) for rate limit reset.

// COMMAND ----------

spark.read.parquet(s"$dirName/alreadyDownloadedIDs").show()

// COMMAND ----------

val df = spark.read.parquet(s"$dirName/*")

// COMMAND ----------

df.count // 5935

// COMMAND ----------

display(df)

// COMMAND ----------

// MAGIC %md
// MAGIC # List of Seed Users in each Retrospective Augmentation

// COMMAND ----------

// first seed accounts used in retro augmentation
val seedIDs0_20180322 = Seq(878300089L, 3325105205L, 900460349702496258L, 3208027984L, 3048723709L, 343663197L, 973260584396427264L, 2904898289L, 19823951L, 240631769L, 31080756L, 1735498316L, 1341924050L, 271321132L, 19314018L, 3472324217L, 15402649L, 19061720L, 37868481L, 812270040649179136L, 19236255L, 68483142L, 704683185L, 4826073173L, 763411220804280321L, 182520290L, 1283306778L, 21858579L, 2392343062L, 18898111L, 563652166L, 130931010L, 1527760766L, 780340604660289536L, 871668595L, 3030169520L, 135489572L, 391707601L, 11858002L, 3003146638L, 2155915072L, 2878953400L, 19496771L, 2588084084L, 2850060292L, 143457836L, 18768538L, 1393033250L, 1616951270L, 2846697609L, 4185038309L, 19015055L, 199373792L, 1725739801L, 25311688L, 2801618890L, 382128174L, 614512530L, 752969661000605696L, 29401817L, 388330222L, 855827449019551744L, 400001248L, 4234370381L, 2629539781L, 578090036L, 23308888L, 1188281468L, 214447361L, 20865466L, 594930372L, 47156292L, 2595384512L, 1876698872L, 863870772267364354L, 20912700L, 1175517073L, 3429791746L, 516881756L, 28331257L, 18941777L, 169424116L, 422877171L, 783065636L, 4257655816L, 4777071279L, 733728918411313157L, 3416201399L, 512875987L, 834033821628690432L, 455946342L, 18577082L, 512403375L, 730443494L, 893166764443537408L, 19778134L, 808089998172024832L, 608202622L, 706764132184432640L, 1433723310L, 333265493L, 2352957686L, 365577229L, 2889549597L, 872047290L, 26489325L, 2964328726L, 3054576341L, 289345749L, 568088930L, 964355762L, 800281172L, 4879397603L, 188453927L, 2312716715L, 30199609L, 763053819580321792L, 562903986L, 2483549179L, 2301447301L, 298744792L, 528848733L, 303708623L, 265951489L, 3468263355L, 18803009L, 166183793L, 18776278L, 2889123214L, 47329763L, 18642457L, 29944729L, 20202859L, 27914274L, 570028452L, 2313725803L, 19085332L, 722064747596812288L, 454201034L, 508586205L, 239034989L, 2236214974L, 782077896L, 788401044158083072L, 31374301L, 2404433921L, 724991824985731072L, 865989777597845506L, 2436452542L, 113940820L, 395542723L, 1945040929L, 272022187L, 1521554240L, 37419686L, 47306468L, 706669183L, 132468849L, 19017675L, 2245574173L, 122078343L, 27837450L, 3304766355L, 89929673L, 19235477L, 226099556L, 877699123L, 3289663197L, 377946745L, 34907977L, 499230066L, 1724794465L, 2545009211L, 232382227L, 46725883L, 18447095L, 1166961122L, 2172236684L, 100182732L, 390636166L, 2255251825L, 3949646303L, 22159604L, 974710136L, 782851981L, 1060258711L, 1922664834L, 140488453L, 2163521143L, 145539086L, 4481336067L, 121832664L, 338026921L, 1155051500L, 1196582724L, 27722772L, 2890850363L, 754760779329638401L, 482286374L, 333045778L, 2962858606L, 4783738763L, 22039926L, 90871042L, 1161300068L, 878800765829120000L, 19650143L, 2151183954L, 749676555081748484L, 97217647L, 2393821893L, 394637051L, 1085444816L, 3705543556L, 18781492L, 2229113615L, 1093617042L, 3434482251L, 346344101L, 842329203181780993L, 2396511375L, 268492292L, 71507821L, 2335152409L, 483311585L, 878783544L, 468372148L, 2466809932L, 19523359L, 68945032L, 806917014L, 1406453300L, 2412365100L, 542170497L, 47881391L, 16324353L, 111991054L, 27021309L, 459335145L, 716915545539526656L, 51746591L, 192508576L, 3301275581L, 157497762L, 435854067L, 19853634L, 37706685L, 139127908L, 3629980455L, 68667032L, 2554589383L, 95972673L, 130571757L, 18720634L, 840386685384966146L, 2200293147L, 3693946403L, 834713675130863619L, 224614992L, 2481987373L, 2878181861L, 18778803L, 14948611L, 587216713L, 2960381469L, 3394028607L, 78048238L, 749656097762447364L, 2157225635L, 1129361413L, 2898827667L, 2994150045L, 2742967091L, 2885965707L, 484578210L, 156193896L, 1175135413L, 18976566L, 520288932L, 527929885L, 628660217L, 434733395L, 346691090L, 423559923L, 34504853L, 841390742387990530L, 3329719133L, 749653279630557184L, 161963297L, 89427793L, 111064894L, 18722968L, 19333183L, 746717616916598784L, 18759580L, 526517939L, 764392235320434688L, 24570378L, 20068313L, 18900142L, 24715437L, 2229820519L, 148098242L, 570196660L, 738818917012021248L, 2882613629L, 909057496098189312L, 771153540L, 772560784807387136L, 2386291685L, 19179185L, 155324976L, 375803930L, 19643874L, 27500871L, 117480668L, 30633434L, 19981221L, 2942579679L, 1368116144L, 514100709L, 327359409L, 561968042L, 1382692608L, 27714678L, 3187235553L, 108906498L, 1353568513L, 388125818L, 963945493L, 1658512212L, 506257229L, 565268225L, 581316692L, 763669877756456960L, 200493123L, 2207916705L, 39958883L, 893107425720631296L, 37902479L, 3190906342L, 2853212471L, 393890670L, 2557535953L, 19284493L, 2294337954L, 749675707870093313L, 711164584850276353L, 241110892L, 950648755L, 925161145L, 38464227L, 26754159L, 846490691366768640L, 110948272L, 41846907L, 552531226L, 84310420L, 19566644L, 325954026L, 154050557L, 759613015767613442L, 122105107L, 2097191L, 139186313L, 3801501L, 769705166L, 152696200L, 478930718L, 896335670716878850L, 3457675883L, 989684827L, 966204836L, 3881319459L, 1148390670L, 3333132904L, 398695170L, 58419769L, 27604754L, 122022318L, 1477745286L, 1113942241L, 2386885596L, 2435618995L, 868565738L, 2297877809L, 146235861L, 2370627199L, 104229816L, 3304391169L, 4459712902L, 374186312L, 321362887L, 11857492L, 1021868336L, 2455556208L, 2315230584L, 21866399L, 87793521L, 2687295422L, 555916903L, 636302550L, 83603458L, 18838766L, 2416987738L, 891953481896124416L, 347469412L, 282740590L, 319147226L, 2921347427L, 334054650L, 83785861L, 302612407L, 907311171564441601L, 1067820385L, 1261508922L, 18759086L, 1372835454L, 219266880L, 1016701483L, 222759734L, 964095866L, 437733787L, 498695121L, 747555945618767876L, 2149053198L, 49568716L, 980080890L, 835457540423094272L, 1556066857L, 3065329706L, 751008913416421376L, 860592314514886660L, 152848722L, 118722303L, 572867000L, 910832172310949888L, 628665187L, 22470605L, 36040217L, 832186936857096192L, 528890147L, 788830726137475076L, 1701494353L, 44098212L, 731145817441079296L, 2159104541L, 591865811L, 2255424079L, 1053311005L, 2446938020L, 68957817L, 853607562683584514L, 23444635L, 2619196809L, 85777101L, 406578394L, 3343962053L, 4208658790L, 4307786548L, 3401399728L, 19186613L, 161673168L, 273134386L, 128804116L, 267740219L, 19247522L, 65617648L, 107414992L, 27842716L, 98212710L, 510223355L, 1114769642L, 25659206L, 24021197L, 20596565L, 20841592L, 722735762781954049L, 368777408L, 882653474L, 1344261205L, 898585348581863424L, 833445379039490051L, 402690401L, 865555320453517315L, 1433921474L, 25660377L, 20582098L, 723955390254329857L, 844593559122665473L, 1327807772L, 393309650L, 292317698L, 716550823719911424L, 2893142548L, 96089009L, 2187103782L, 3389992606L, 2909903733L, 334672453L, 20921291L, 4792927420L, 2909959054L, 560277414L, 906096158L, 1908879258L, 1441726944L, 19161627L, 25266533L, 921655142L, 4817853640L, 142282561L, 1970908880L, 2845072718L, 892476423826440192L, 911918684607795201L, 119351043L, 1245962396L, 1408413445L, 3567291333L, 606968732L, 507156309L, 141917431L, 613419622L, 2829792282L, 3840202757L, 39971453L, 2979635170L, 62018785L, 1136834894L, 243551360L, 19448284L, 35717737L, 2256845427L, 2741857108L, 237648982L, 31547704L, 25803598L, 328995303L, 245467017L, 1350323634L, 4397198303L, 61481011L, 723750200L, 4717892303L, 476764652L, 562261824L, 1715348046L, 292331091L, 392684445L, 847803576311312384L, 15029720L, 869857282623975424L, 2933434091L, 4243159019L, 1187275844L, 847082046L, 3061603473L, 24265642L, 124239708L, 993703645L, 1591442466L, 2924593731L, 796068994054815744L, 104783793L, 34743468L, 59731340L, 29165164L, 198871052L, 24874309L, 3373675319L, 87302885L, 490276190L, 231410482L, 2479331902L, 1375062308L, 33926493L, 3482872282L, 215423375L, 614299477L, 25379961L, 592490041L, 77147780L, 299559374L, 154116697L, 1243374858L, 321522177L, 3180476655L, 22464270L, 372142346L, 487515115L, 3980704157L, 460595966L, 1564311799L, 804735637630971906L, 754763759688773632L, 813732947694067712L, 1159091352L, 3096914481L, 35743684L, 776476836L, 900285272298053632L, 277384675L, 534370294L, 26005916L, 1900293397L, 19198381L, 2597676656L, 25053123L, 2375814823L, 332457139L, 379656481L, 836255197659803648L, 3260039275L, 499854916L, 342607637L, 26981298L, 107231140L, 613309515L, 4873847764L, 18979562L, 196213234L, 19185125L, 2870982137L, 225817388L, 1947525476L, 502997747L, 278036073L, 808594634L, 2231927771L, 75005086L, 899371272L, 351638843L, 21486473L, 1488622058L, 18759751L, 581931500L, 108927409L, 2373603537L, 2813435230L, 99128675L, 825739170920484866L, 2903893924L, 2584606664L, 551838506L, 21764525L, 811462749897236482L, 122763720L, 3007745019L, 1858012890L, 526143685L, 198886415L, 97868744L, 826609377469665280L, 3201975610L, 2914150427L, 214452533L, 1469432677L, 3003988869L, 717707477287047168L, 206582058L, 894999575433555970L, 477946503L, 720518367L, 156348820L, 835799611109425152L, 778982606989910016L, 804349892416208896L, 2790018288L, 580613218L, 23763218L, 3097484633L, 306370816L, 102276010L, 3423649865L, 757929379154518016L, 171685261L, 722676822308163584L, 2966249284L, 1670287038L, 1180158356L, 781835440840183808L, 119159588L, 182935271L, 3295131167L, 28634867L, 2188093454L, 555040488L, 2731782747L, 3034284701L, 4611975321L, 1852238509L, 799565034347266049L, 47407209L, 2722177548L, 18760116L, 1941901813L, 18839942L, 280885197L, 325468450L, 128176155L, 3014203738L, 2954692619L, 559384320L, 102496469L, 2524694150L, 2283612444L, 19864223L, 318993474L, 496050817L, 874102699L, 217031152L, 43288429L, 552630315L, 133200254L, 19445100L, 24188676L, 711989507906801664L, 18796362L, 23512612L, 148386719L, 118643322L, 104943486L, 725896819L, 4830085960L, 346795026L, 3363764459L, 727962411081338880L, 18761673L, 717037294092423170L, 282532238L, 1712174640L, 234807573L, 371238644L, 3632177895L, 18778823L, 33863096L, 893177606748729344L, 1447363795L, 2864221346L, 332901740L, 784781140397785088L, 2369244312L, 4894263947L, 339107634L, 809053296325496836L, 27856210L, 2930098775L, 877431079L, 2660021067L, 422692987L, 137634081L, 1077817430L, 23245616L, 718855606L, 753812373488607232L, 139397687L, 3082531732L, 845643132L, 426071524L, 29454622L, 3559456575L, 714145755909500928L, 1201747669L, 817084630121779201L, 4125679233L, 2987122179L, 551229082L, 2561165431L, 4794976401L, 2579025626L, 197825824L, 1827722011L, 2938544519L, 1269314047L, 2244138606L, 3377426375L, 82465019L, 362444109L, 782848264408338432L, 4829813404L, 917145523261493249L, 83585393L, 301518835L, 123862900L, 2811008905L, 313229624L, 229199470L, 140527665L, 2903465373L, 2660979665L, 1635402042L, 53089852L, 2776230340L, 93899982L, 1706392436L, 18829430L, 2427645310L, 1357201854L, 362339392L, 749664673037950976L, 2653201716L, 3804101379L, 2410963622L, 156635362L, 73100393L, 741590076065501184L, 470313644L, 108046242L, 20665508L, 35209318L, 69593413L, 18694252L, 294065941L, 18818550L, 754758518541082624L, 3254523441L, 97878686L, 2538213318L, 25125441L, 2348119694L, 4227822587L, 1097653338L, 800422175261868034L, 1011476384L, 19455187L, 3430626101L, 147998374L, 1378966748L, 87654562L, 2294085750L, 3698045056L, 346025070L, 297838327L, 2316753940L, 1956930829L, 1048189687L, 425292193L, 22291443L, 3057563548L, 502796617L, 30981659L, 222789002L, 20315636L, 121066419L, 2253169846L, 952437572L, 834041778L, 2326045993L, 32016073L, 813286L, 72514175L, 1531435626L, 74749621L, 461476291L, 21129331L, 3461235562L, 186533780L, 104778698L, 41857380L) // 939230172280213504L, 980415995629187072L

// COMMAND ----------

