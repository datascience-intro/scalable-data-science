// Databricks notebook source
// MAGIC %md
// MAGIC # Streaming SE tweets Collector - If you are NOT Raaz then leave this notebook alone!!!
// MAGIC 
// MAGIC ### 2017, Raazesh Sainudiin ...
// MAGIC 
// MAGIC This is part of *Project MEP: Meme Evolution Programme* and supported by databricks academic partners program.
// MAGIC 
// MAGIC The analysis builds on the code available in the following databricks notebook:
// MAGIC * [http://lamastex.org/lmse/mep/src/extendedTwitterUtils.html](http://lamastex.org/lmse/mep/src/extendedTwitterUtil.html)
// MAGIC 
// MAGIC 
// MAGIC ```
// MAGIC Copyright 2016 Raazesh Sainudiin and Joakim Johansson
// MAGIC 
// MAGIC Licensed under the Apache License, Version 2.0 (the "License");
// MAGIC you may not use this file except in compliance with the License.
// MAGIC You may obtain a copy of the License at
// MAGIC 
// MAGIC     http://www.apache.org/licenses/LICENSE-2.0
// MAGIC 
// MAGIC Unless required by applicable law or agreed to in writing, software
// MAGIC distributed under the License is distributed on an "AS IS" BASIS,
// MAGIC WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// MAGIC See the License for the specific language governing permissions and
// MAGIC limitations under the License.
// MAGIC ```

// COMMAND ----------

1+1

// COMMAND ----------

// this will make sure all streaming job in the cluster are stopped
StreamingContext.getActive.foreach{ _.stop(stopSparkContext = false) } 

// COMMAND ----------

// MAGIC %run "scalable-data-science/meme-evolution/db/src2run/extendedTwitterUtils2run"

// COMMAND ----------

// MAGIC %run scalable-data-science/meme-evolution/db/src2run/TTTDFfunctions

// COMMAND ----------

// MAGIC %md
// MAGIC ## Let us stream in data now

// COMMAND ----------

import org.apache.spark._
import org.apache.spark.storage._
import org.apache.spark.streaming._

import twitter4j.auth.OAuthAuthorization
import twitter4j.conf.ConfigurationBuilder

import com.google.gson.Gson

// COMMAND ----------

// SOME IMPORTTS
import scala.collection.mutable.ArrayBuffer
import twitter4j._
import twitter4j.conf._
import scala.collection.JavaConverters._ 
import org.apache.spark.sql.Row;
import org.apache.spark.sql.types.{StructType, StructField, StringType};
import twitter4j.RateLimitStatus;
import twitter4j.ResponseList;
import com.google.gson.Gson
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._
import com.google.gson.Gson

// COMMAND ----------

// MAGIC %md
// MAGIC #### Your twitter credentials

// COMMAND ----------

// MAGIC %md
// MAGIC # Finding the most influential users in terms of being retweeted
// MAGIC 
// MAGIC This is iteratively designed.

// COMMAND ----------

// MAGIC %md
// MAGIC # Know what you are doing here!!!
// MAGIC ## best to tak to raaz about this mine-field...

// COMMAND ----------

// this was done already!
//svTTTsDFAll.write.mode(SaveMode.Overwrite).parquet("dbfs:///datasets/MEP/SE/svTTTsDFAll")

// COMMAND ----------

//svTTTsDFAll.rdd.getNumPartitions

// COMMAND ----------

//svTTTsDFAll.unpersist() // no need to have this around now

// COMMAND ----------

// reiterating design to take advantage of Mathila/Simon RightPost design

// COMMAND ----------

val svTTTsDFAllFromParquet = spark.read.parquet("dbfs:///datasets/MEP/SE/svTTTsDFAll").cache
svTTTsDFAllFromParquet.count 
// count at iteration -1: 5679055, TIME:  02/09/2018 // reiterating breadth-first design when 4-days of no data happened in Montreal in the earlier streamer  - enriching with sv-only active users
// count at iteration 0 or NOW: 10030290: TIME: 20/09/2018 //reiterating breadth-first expansions to take advantage of Mathila/Simon RightPost design - enriching with sv-only active users

// COMMAND ----------

svTTTsDFAllFromParquet.printSchema

// COMMAND ----------

// number of unique current post user Ids of sv tweets
svTTTsDFAllFromParquet.select("CPostUserId").distinct.count
// iteration -1: count = 102806
// iteration 0: count = 883005

// COMMAND ----------

val CPostUserSN_CreatedAtDate = svTTTsDFAllFromParquet.select("CPostUserId","CPostUserSN","userCreatedAtDate","followersCount","friendsCount","weight")
                                                      .groupBy("CPostUserSN","userCreatedAtDate")
                                                      .agg(sum("weight").as("weight"),
                                                           max("followersCount").as("followersCount"),
                                                           max("friendsCount").as("friendsCount"))
                                                      .orderBy($"weight".desc)
display(CPostUserSN_CreatedAtDate)

// COMMAND ----------

val svOT = svTTTsDFAllFromParquet.filter($"TweetType"==="Original Tweet")
                                            .select($"CPostUserId".as("twitterAccountId"),$"userCreatedAtDate",$"followersCount",$"friendsCount",$"weight")
                                                      .groupBy("twitterAccountId","userCreatedAtDate")
                                                      .agg(sum("weight").as("weight"),
                                                           max("followersCount").as("followersCount"),
                                                           max("friendsCount").as("friendsCount"))
                                                      .orderBy($"weight".desc)
display(svOT)

// COMMAND ----------

val svRT = svTTTsDFAllFromParquet.filter($"TweetType"==="ReTweet")
                                 .select($"OPostUserIdinRT".as("twitterAccountId"),$"userCreatedAtDate",$"followersCount",$"friendsCount",$"weight")
                                                      .groupBy("twitterAccountId","userCreatedAtDate")
                                                      .agg(sum("weight").as("weight"),
                                                           max("followersCount").as("followersCount"),
                                                           max("friendsCount").as("friendsCount"))
                                                      .orderBy($"weight".desc)
display(svRT)

// COMMAND ----------

svTTTsDFAllFromParquet.printSchema

// COMMAND ----------

svTTTsDFAllFromParquet.filter($"TweetType"==="Reply Tweet").count
// -1:  1780295
// 0: 2989861

// COMMAND ----------

val svRepT = svTTTsDFAllFromParquet
          .filter($"TweetType"==="Reply Tweet")
          .select($"OPostUserIdinReply".as("twitterAccountId"),$"OPostUserSNinReply",$"userCreatedAtDate",$"followersCount",$"friendsCount",$"weight")
                                                      .groupBy("twitterAccountId","userCreatedAtDate")
                                                      .agg(sum("weight").as("weight"),
                                                           max("followersCount").as("followersCount"),
                                                           max("friendsCount").as("friendsCount"))

                                                      //.orderBy($"weight".desc)
display(svRepT)

// COMMAND ----------

display(svTTTsDFAllFromParquet
          .select($"TweetType",$"weight").groupBy("TweetType").agg(sum("weight").as("weight")).orderBy($"weight".desc))
//iteration -1
/*
TweetType  Weight
=========  ======
ReTweet	3054502
Reply Tweet	1780295
Retweet of Quoted Tweet	472626
Original Tweet	272881
Quoted Tweet	87752
Reply of Quoted Tweet	10999
*/
//iteration 0
/*
TweetType  Weight
=========  ======
ReTweet	4875924
Reply Tweet	2989861
Original Tweet	1159172
Retweet of Quoted Tweet	686194
Quoted Tweet	300113
Reply of Quoted Tweet	19026
*/

// COMMAND ----------

display(svTTTsDFAllFromParquet
          .filter($"TweetType"==="Reply of Quoted Tweet"))

// COMMAND ----------

val svRTQT = svTTTsDFAllFromParquet
          .filter($"TweetType"==="Retweet of Quoted Tweet")
          .select($"OPostUserIdinRT".as("twitterAccountId"),$"userCreatedAtDate",$"followersCount",$"friendsCount",$"weight")
                                                      .groupBy("twitterAccountId","userCreatedAtDate")
                                                      .agg(sum("weight").as("weight"),
                                                           max("followersCount").as("followersCount"),
                                                           max("friendsCount").as("friendsCount"))
                                                      .orderBy($"weight".desc)
display(svRTQT)

// COMMAND ----------

val svQT = svTTTsDFAllFromParquet
          .filter($"TweetType"==="Quoted Tweet")
          .select($"OPostUserIdinQT".as("twitterAccountId"),$"userCreatedAtDate",$"followersCount",$"friendsCount",$"weight")
                                                      .groupBy("twitterAccountId","userCreatedAtDate")
                                                      .agg(sum("weight").as("weight"),
                                                           max("followersCount").as("followersCount"),
                                                           max("friendsCount").as("friendsCount"))
                                                      .orderBy($"weight".desc)
display(svQT)

// COMMAND ----------

val svRepQT = svTTTsDFAllFromParquet
          .filter($"TweetType"==="Reply of Quoted Tweet")
          .select($"OPostUserIdinQT".as("twitterAccountId"),$"userCreatedAtDate",$"followersCount",$"friendsCount",$"weight")
                                                      .groupBy("twitterAccountId","userCreatedAtDate")
                                                      .agg(sum("weight").as("weight"),
                                                           max("followersCount").as("followersCount"),
                                                           max("friendsCount").as("friendsCount"))
                                                      .orderBy($"weight".desc)
display(svRepQT)

// COMMAND ----------

svOT.filter($"weight">60L).count 
// iteration 0: 
/*
TRIAL 0:: svOT.filter($"weight">10L).count = 14504
TRIAL 1:: svOT.filter($"weight">20L).count = 7576
TRIAL 2:: svOT.filter($"weight">30L).count = 5110
TRIAL 3:: svOT.filter($"weight">40L).count = 3855
TRIAL 4:: svOT.filter($"weight">50L).count = 3111
TRIAL 5:: svOT.filter($"weight">60L).count = 2584

*/

// COMMAND ----------

svRT.filter($"weight">50L).count
// iteration 0: 
/*
TRIAL 0:: svRT.filter($"weight">10L).count = 60600
TRIAL 1:: svRT.filter($"weight">50L).count = 8203
TRIAL 2:: svRT.filter($"weight">10L).count = 
*/

// COMMAND ----------

val svOTf = svOT.filter($"weight">50L)
val svOTc = svOTf.count // those who posted more than x many original tweets
val svRTf = svRT.filter($"weight">50L)
val svRTc = svRTf.count // 
val svRepTf = svRepT.filter($"weight">50L)
val svRepTc = svRepTf.count // 
val svRTQTf = svRTQT.filter($"weight">50L)
val svRTQTc = svRTQTf.count // 
val svQTf = svQT.filter($"weight">50L)
val svQTc = svQTf.count // 
val svRepQTf = svRepQT.filter($"weight">50L)
val svRepQTc = svRepQTf.count // 
val allC = svOTc+svRTc+svRepTc+svRTQTc+svQTc+svRepQTc
val svActiveAccounts = svOTf.union(svRTf).union(svRepTf).union(svRTQTf).union(svQTf).union(svRepQTf).select("twitterAccountId").distinct.cache
svActiveAccounts.count 

// iteration -1: count 3827
/*
input:
val svOTf = svOT.filter($"weight">10L)
val svOTc = svOTf.count // those who posted more than x many original tweets
val svRTf = svRT.filter($"weight">10L)
val svRTc = svRTf.count // 
val svRepTf = svRepT.filter($"weight">10L)
val svRepTc = svRepTf.count // 
val svRTQTf = svRTQT.filter($"weight">10L)
val svRTQTc = svRTQTf.count // 
val svQTf = svQT.filter($"weight">10L)
val svQTc = svQTf.count // 
val svRepQTf = svRepQT.filter($"weight">10L)
val svRepQTc = svRepQTf.count // 
val allC = svOTc+svRTc+svRepTc+svRTQTc+svQTc+svRepQTc
val svActiveAccounts = svOTf.union(svRTf).union(svRepTf).union(svRTQTf).union(svQTf).union(svRepQTf).select("twitterAccountId").distinct.cache
svActiveAccounts.count 

output:
svOTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svOTc: Long = 1009
svRTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRTc: Long = 47928
svRepTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRepTc: Long = 25769
svRTQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRTQTc: Long = 6134
svQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svQTc: Long = 535
svRepQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRepQTc: Long = 61
allC: Long = 81436
svActiveAccounts: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint]
res25: Long = 3827
*/

// iteration 0: TRIAL-00:: count 16700 ::!!!!!! NOT a breadth-first expansion of the iteration 0 selected usersTofollow/track - interfering designs problem of two experimenters and NEEDS heavy retrospective augmentations!!!!!::::!!!!
/*
TRIAL-00:
---------
input:
same as in 'input:'' above
output:
svOTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svOTc: Long = 14504
svRTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRTc: Long = 60600
svRepTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRepTc: Long = 36033
svRTQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRTQTc: Long = 7548
svQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svQTc: Long = 807
svRepQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRepQTc: Long = 86
allC: Long = 119578
svActiveAccounts: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint]
res30: Long = 16700
---------------------------------------------------
TRIAL-01:
---------
input:
val svOTf = svOT.filter($"weight">50L)
val svOTc = svOTf.count // those who posted more than x many original tweets
val svRTf = svRT.filter($"weight">50L)
val svRTc = svRTf.count // 
val svRepTf = svRepT.filter($"weight">50L)
val svRepTc = svRepTf.count // 
val svRTQTf = svRTQT.filter($"weight">50L)
val svRTQTc = svRTQTf.count // 
val svQTf = svQT.filter($"weight">50L)
val svQTc = svQTf.count // 
val svRepQTf = svRepQT.filter($"weight">50L)
val svRepQTc = svRepQTf.count // 
val allC = svOTc+svRTc+svRepTc+svRTQTc+svQTc+svRepQTc
val svActiveAccounts = svOTf.union(svRTf).union(svRepTf).union(svRTQTf).union(svQTf).union(svRepQTf).select("twitterAccountId").distinct.cache
svActiveAccounts.count 
output:
svOTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svOTc: Long = 3111
svRTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRTc: Long = 8203
svRepTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRepTc: Long = 3043
svRTQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRTQTc: Long = 533
svQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svQTc: Long = 43
svRepQTf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint, userCreatedAtDate: timestamp ... 3 more fields]
svRepQTc: Long = 16
allC: Long = 14949
svActiveAccounts: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [twitterAccountId: bigint]
res40: Long = 3576
*/

// COMMAND ----------

// MAGIC %md
// MAGIC ## Starting to iterate tracking list of user accounts

// COMMAND ----------

import scala.collection.mutable.ListBuffer

// COMMAND ----------

// removing Trump after over 3 weeks 
// val ids1 = spark.read.parquet("dbfs:///FileStore/tables/twitterAccountsOfInterest_RTOPostUserIdinRT_InfluencersDF").filter($"OPostUserIDinRT"=!=25073877L)
// this is hard-captured below
val ids1_2018_05_03_23_49_52 = sc.parallelize(Seq(20315636L, 820152458L, 182935271L, 2207916705L, 1447363795L, 61535665L, 2483549179L, 107231140L, 741590076065501184L, 1406453300L, 3423649865L, 75005086L, 271321132L, 2878181861L, 140488453L, 542170497L, 19240396L, 30633434L, 781835440840183808L, 707231479047315456L, 19236255L, 166350461L, 47306468L, 2890850363L, 592490041L, 18643437L, 19523359L, 26489325L, 104778698L, 28527773L, 4227822587L, 3801501L, 49568716L, 2295741811L, 393890670L, 2496730760L, 18761673L, 124239708L, 19226961L, 1368116144L, 110758131L, 264169218L, 23754741L, 29165164L, 35209318L, 113940820L, 18559282L, 38464227L, 359599520L, 435854067L, 4091088617L, 57369931L, 105104279L, 18447095L, 2229820519L, 297838327L, 24859118L, 73100393L, 90871042L, 3693946403L, 3567291333L, 3208027984L, 2584606664L, 2494293187L, 273134386L, 510013612L, 552531226L, 332457139L, 2741857108L, 19014898L, 2845072718L, 4717892303L, 18768538L, 459335145L, 2313725803L, 25379961L, 372142346L, 17233550L, 68667032L, 243551360L, 465482389L, 34504853L, 330178251L, 298744792L, 1635402042L, 18158890L, 77147780L, 97878686L, 51133321L, 2097191L, 2811008905L, 865555320453517315L, 25660377L, 152696200L, 18577082L, 47881391L, 19643874L, 19823951L, 877431079L, 711164584850276353L, 440818703L, 245467017L, 68483142L, 122763720L, 784781140397785088L, 1136834894L, 3796501L, 21764525L, 140527665L, 520288932L, 3389992606L, 3329719133L, 139186313L, 3289663197L, 18760690L, 822905954L)).toDF("OPostUserIdinRT")
ids1_2018_05_03_23_49_52.count

// COMMAND ----------

val seedIDs0_20180322 = sc.parallelize(Seq(878300089L, 3325105205L, 900460349702496258L, 3208027984L, 3048723709L, 343663197L, 973260584396427264L, 2904898289L, 19823951L, 240631769L, 31080756L, 1735498316L, 1341924050L, 271321132L, 19314018L, 3472324217L, 15402649L, 19061720L, 37868481L, 812270040649179136L, 19236255L, 68483142L, 704683185L, 4826073173L, 763411220804280321L, 182520290L, 1283306778L, 21858579L, 2392343062L, 18898111L, 563652166L, 130931010L, 1527760766L, 780340604660289536L, 871668595L, 3030169520L, 135489572L, 391707601L, 11858002L, 3003146638L, 2155915072L, 2878953400L, 19496771L, 2588084084L, 2850060292L, 143457836L, 18768538L, 1393033250L, 1616951270L, 2846697609L, 4185038309L, 19015055L, 199373792L, 1725739801L, 25311688L, 2801618890L, 382128174L, 614512530L, 752969661000605696L, 29401817L, 388330222L, 855827449019551744L, 400001248L, 4234370381L, 2629539781L, 578090036L, 23308888L, 1188281468L, 214447361L, 20865466L, 594930372L, 47156292L, 2595384512L, 1876698872L, 863870772267364354L, 20912700L, 1175517073L, 3429791746L, 516881756L, 28331257L, 18941777L, 169424116L, 422877171L, 783065636L, 4257655816L, 4777071279L, 733728918411313157L, 3416201399L, 512875987L, 834033821628690432L, 455946342L, 18577082L, 512403375L, 730443494L, 893166764443537408L, 19778134L, 808089998172024832L, 608202622L, 706764132184432640L, 1433723310L, 333265493L, 2352957686L, 365577229L, 2889549597L, 872047290L, 26489325L, 2964328726L, 3054576341L, 289345749L, 568088930L, 964355762L, 800281172L, 4879397603L, 188453927L, 2312716715L, 30199609L, 763053819580321792L, 562903986L, 2483549179L, 2301447301L, 298744792L, 528848733L, 303708623L, 265951489L, 3468263355L, 18803009L, 166183793L, 18776278L, 2889123214L, 47329763L, 18642457L, 29944729L, 20202859L, 27914274L, 570028452L, 2313725803L, 19085332L, 722064747596812288L, 454201034L, 508586205L, 239034989L, 2236214974L, 782077896L, 788401044158083072L, 31374301L, 2404433921L, 724991824985731072L, 865989777597845506L, 2436452542L, 113940820L, 395542723L, 1945040929L, 272022187L, 1521554240L, 37419686L, 47306468L, 706669183L, 132468849L, 19017675L, 2245574173L, 122078343L, 27837450L, 3304766355L, 89929673L, 19235477L, 226099556L, 877699123L, 3289663197L, 377946745L, 34907977L, 499230066L, 1724794465L, 2545009211L, 232382227L, 46725883L, 18447095L, 1166961122L, 2172236684L, 100182732L, 390636166L, 2255251825L, 3949646303L, 22159604L, 974710136L, 782851981L, 1060258711L, 1922664834L, 140488453L, 2163521143L, 145539086L, 4481336067L, 121832664L, 338026921L, 1155051500L, 1196582724L, 27722772L, 2890850363L, 754760779329638401L, 482286374L, 333045778L, 2962858606L, 4783738763L, 22039926L, 90871042L, 1161300068L, 878800765829120000L, 19650143L, 2151183954L, 749676555081748484L, 97217647L, 2393821893L, 394637051L, 1085444816L, 3705543556L, 18781492L, 2229113615L, 1093617042L, 3434482251L, 346344101L, 842329203181780993L, 2396511375L, 268492292L, 71507821L, 2335152409L, 483311585L, 878783544L, 468372148L, 2466809932L, 19523359L, 68945032L, 806917014L, 1406453300L, 2412365100L, 542170497L, 47881391L, 16324353L, 111991054L, 27021309L, 459335145L, 716915545539526656L, 51746591L, 192508576L, 3301275581L, 157497762L, 435854067L, 19853634L, 37706685L, 139127908L, 3629980455L, 68667032L, 2554589383L, 95972673L, 130571757L, 18720634L, 840386685384966146L, 2200293147L, 3693946403L, 834713675130863619L, 224614992L, 2481987373L, 2878181861L, 18778803L, 14948611L, 587216713L, 2960381469L, 3394028607L, 78048238L, 749656097762447364L, 2157225635L, 1129361413L, 2898827667L, 2994150045L, 2742967091L, 2885965707L, 484578210L, 156193896L, 1175135413L, 18976566L, 520288932L, 527929885L, 628660217L, 434733395L, 346691090L, 423559923L, 34504853L, 841390742387990530L, 3329719133L, 749653279630557184L, 161963297L, 89427793L, 111064894L, 18722968L, 19333183L, 746717616916598784L, 18759580L, 526517939L, 764392235320434688L, 24570378L, 20068313L, 18900142L, 24715437L, 2229820519L, 148098242L, 570196660L, 738818917012021248L, 2882613629L, 909057496098189312L, 771153540L, 772560784807387136L, 2386291685L, 19179185L, 155324976L, 375803930L, 19643874L, 27500871L, 117480668L, 30633434L, 19981221L, 2942579679L, 1368116144L, 514100709L, 327359409L, 561968042L, 1382692608L, 27714678L, 3187235553L, 108906498L, 1353568513L, 388125818L, 963945493L, 1658512212L, 506257229L, 565268225L, 581316692L, 763669877756456960L, 200493123L, 2207916705L, 39958883L, 893107425720631296L, 37902479L, 3190906342L, 2853212471L, 393890670L, 2557535953L, 19284493L, 2294337954L, 749675707870093313L, 711164584850276353L, 241110892L, 950648755L, 925161145L, 38464227L, 26754159L, 846490691366768640L, 110948272L, 41846907L, 552531226L, 84310420L, 19566644L, 325954026L, 154050557L, 759613015767613442L, 122105107L, 2097191L, 139186313L, 3801501L, 769705166L, 152696200L, 478930718L, 896335670716878850L, 3457675883L, 989684827L, 966204836L, 3881319459L, 1148390670L, 3333132904L, 398695170L, 58419769L, 27604754L, 122022318L, 1477745286L, 1113942241L, 2386885596L, 2435618995L, 868565738L, 2297877809L, 146235861L, 2370627199L, 104229816L, 3304391169L, 4459712902L, 374186312L, 321362887L, 11857492L, 1021868336L, 2455556208L, 2315230584L, 21866399L, 87793521L, 2687295422L, 555916903L, 636302550L, 83603458L, 18838766L, 2416987738L, 891953481896124416L, 347469412L, 282740590L, 319147226L, 2921347427L, 334054650L, 83785861L, 302612407L, 907311171564441601L, 1067820385L, 1261508922L, 18759086L, 1372835454L, 219266880L, 1016701483L, 222759734L, 964095866L, 437733787L, 498695121L, 747555945618767876L, 2149053198L, 49568716L, 980080890L, 835457540423094272L, 1556066857L, 3065329706L, 751008913416421376L, 860592314514886660L, 152848722L, 118722303L, 572867000L, 910832172310949888L, 628665187L, 22470605L, 36040217L, 832186936857096192L, 528890147L, 788830726137475076L, 1701494353L, 44098212L, 731145817441079296L, 2159104541L, 591865811L, 2255424079L, 1053311005L, 2446938020L, 68957817L, 853607562683584514L, 23444635L, 2619196809L, 85777101L, 406578394L, 3343962053L, 4208658790L, 4307786548L, 3401399728L, 19186613L, 161673168L, 273134386L, 128804116L, 267740219L, 19247522L, 65617648L, 107414992L, 27842716L, 98212710L, 510223355L, 1114769642L, 25659206L, 24021197L, 20596565L, 20841592L, 722735762781954049L, 368777408L, 882653474L, 1344261205L, 898585348581863424L, 833445379039490051L, 402690401L, 865555320453517315L, 1433921474L, 25660377L, 20582098L, 723955390254329857L, 844593559122665473L, 1327807772L, 393309650L, 292317698L, 716550823719911424L, 2893142548L, 96089009L, 2187103782L, 3389992606L, 2909903733L, 334672453L, 20921291L, 4792927420L, 2909959054L, 560277414L, 906096158L, 1908879258L, 1441726944L, 19161627L, 25266533L, 921655142L, 4817853640L, 142282561L, 1970908880L, 2845072718L, 892476423826440192L, 911918684607795201L, 119351043L, 1245962396L, 1408413445L, 3567291333L, 606968732L, 507156309L, 141917431L, 613419622L, 2829792282L, 3840202757L, 39971453L, 2979635170L, 62018785L, 1136834894L, 243551360L, 19448284L, 35717737L, 2256845427L, 2741857108L, 237648982L, 31547704L, 25803598L, 328995303L, 245467017L, 1350323634L, 4397198303L, 61481011L, 723750200L, 4717892303L, 476764652L, 562261824L, 1715348046L, 292331091L, 392684445L, 847803576311312384L, 15029720L, 869857282623975424L, 2933434091L, 4243159019L, 1187275844L, 847082046L, 3061603473L, 24265642L, 124239708L, 993703645L, 1591442466L, 2924593731L, 796068994054815744L, 104783793L, 34743468L, 59731340L, 29165164L, 198871052L, 24874309L, 3373675319L, 87302885L, 490276190L, 231410482L, 2479331902L, 1375062308L, 33926493L, 3482872282L, 215423375L, 614299477L, 25379961L, 592490041L, 77147780L, 299559374L, 154116697L, 1243374858L, 321522177L, 3180476655L, 22464270L, 372142346L, 487515115L, 3980704157L, 460595966L, 1564311799L, 804735637630971906L, 754763759688773632L, 813732947694067712L, 1159091352L, 3096914481L, 35743684L, 776476836L, 900285272298053632L, 277384675L, 534370294L, 26005916L, 1900293397L, 19198381L, 2597676656L, 25053123L, 2375814823L, 332457139L, 379656481L, 836255197659803648L, 3260039275L, 499854916L, 342607637L, 26981298L, 107231140L, 613309515L, 4873847764L, 18979562L, 196213234L, 19185125L, 2870982137L, 225817388L, 1947525476L, 502997747L, 278036073L, 808594634L, 2231927771L, 75005086L, 899371272L, 351638843L, 21486473L, 1488622058L, 18759751L, 581931500L, 108927409L, 2373603537L, 2813435230L, 99128675L, 825739170920484866L, 2903893924L, 2584606664L, 551838506L, 21764525L, 811462749897236482L, 122763720L, 3007745019L, 1858012890L, 526143685L, 198886415L, 97868744L, 826609377469665280L, 3201975610L, 2914150427L, 214452533L, 1469432677L, 3003988869L, 717707477287047168L, 206582058L, 894999575433555970L, 477946503L, 720518367L, 156348820L, 835799611109425152L, 778982606989910016L, 804349892416208896L, 2790018288L, 580613218L, 23763218L, 3097484633L, 306370816L, 102276010L, 3423649865L, 757929379154518016L, 171685261L, 722676822308163584L, 2966249284L, 1670287038L, 1180158356L, 781835440840183808L, 119159588L, 182935271L, 3295131167L, 28634867L, 2188093454L, 555040488L, 2731782747L, 3034284701L, 4611975321L, 1852238509L, 799565034347266049L, 47407209L, 2722177548L, 18760116L, 1941901813L, 18839942L, 280885197L, 325468450L, 128176155L, 3014203738L, 2954692619L, 559384320L, 102496469L, 2524694150L, 2283612444L, 19864223L, 318993474L, 496050817L, 874102699L, 217031152L, 43288429L, 552630315L, 133200254L, 19445100L, 24188676L, 711989507906801664L, 18796362L, 23512612L, 148386719L, 118643322L, 104943486L, 725896819L, 4830085960L, 346795026L, 3363764459L, 727962411081338880L, 18761673L, 717037294092423170L, 282532238L, 1712174640L, 234807573L, 371238644L, 3632177895L, 18778823L, 33863096L, 893177606748729344L, 1447363795L, 2864221346L, 332901740L, 784781140397785088L, 2369244312L, 4894263947L, 339107634L, 809053296325496836L, 27856210L, 2930098775L, 877431079L, 2660021067L, 422692987L, 137634081L, 1077817430L, 23245616L, 718855606L, 753812373488607232L, 139397687L, 3082531732L, 845643132L, 426071524L, 29454622L, 3559456575L, 714145755909500928L, 1201747669L, 817084630121779201L, 4125679233L, 2987122179L, 551229082L, 2561165431L, 4794976401L, 2579025626L, 197825824L, 1827722011L, 2938544519L, 1269314047L, 2244138606L, 3377426375L, 82465019L, 362444109L, 782848264408338432L, 4829813404L, 917145523261493249L, 83585393L, 301518835L, 123862900L, 2811008905L, 313229624L, 229199470L, 140527665L, 2903465373L, 2660979665L, 1635402042L, 53089852L, 2776230340L, 93899982L, 1706392436L, 18829430L, 2427645310L, 1357201854L, 362339392L, 749664673037950976L, 2653201716L, 3804101379L, 2410963622L, 156635362L, 73100393L, 741590076065501184L, 470313644L, 108046242L, 20665508L, 35209318L, 69593413L, 18694252L, 294065941L, 18818550L, 754758518541082624L, 3254523441L, 97878686L, 2538213318L, 25125441L, 2348119694L, 4227822587L, 1097653338L, 800422175261868034L, 1011476384L, 19455187L, 3430626101L, 147998374L, 1378966748L, 87654562L, 2294085750L, 3698045056L, 346025070L, 297838327L, 2316753940L, 1956930829L, 1048189687L, 425292193L, 22291443L, 3057563548L, 502796617L, 30981659L, 222789002L, 20315636L, 121066419L, 2253169846L, 952437572L, 834041778L, 2326045993L, 32016073L, 813286L, 72514175L, 1531435626L, 74749621L, 461476291L, 21129331L, 3461235562L, 186533780L, 104778698L, 41857380L,939230172280213504L, 980415995629187072L)).toDF("OPostUserIdinRT")

// COMMAND ----------

seedIDs0_20180322.count

// COMMAND ----------

val twitterIDsToFollow_20180322: scala.collection.mutable.ListBuffer[Long] = ListBuffer(527929885L, 26754159L, 552630315L, 110758131L, 2545009211L, 1701494353L, 514100709L, 18839942L, 2561165431L, 18818550L, 264169218L, 23754741L, 2392343062L, 145539086L, 3061603473L, 215423375L, 18900142L, 506257229L, 2283612444L, 1077817430L, 502796617L, 470313644L, 1011476384L, 2909903733L, 578090036L, 108906498L, 4794976401L, 3254523441L, 800422175261868034L, 41857380L, 377946745L, 321522177L, 2554589383L, 161963297L, 29165164L, 1269314047L, 35209318L, 568088930L, 122078343L, 368777408L, 512403375L, 906096158L, 2924593731L, 437733787L, 1245962396L, 95972673L, 950648755L, 3377426375L, 3804101379L, 2882613629L, 1148390670L, 2393821893L, 35743684L, 2903465373L, 2481987373L, 97217647L, 2964328726L, 19085332L, 113940820L, 2595384512L, 2255251825L, 3394028607L, 722676822308163584L, 2188093454L, 1827722011L, 18559282L, 2200293147L, 18778803L, 346691090L, 2954692619L, 425292193L, 141917431L, 342607637L, 846490691366768640L, 716915545539526656L, 38464227L, 188453927L, 499854916L, 1947525476L, 2898827667L, 894999575433555970L, 359599520L, 2846697609L, 36040217L, 4208658790L, 35717737L, 528890147L, 96089009L, 435854067L, 139127908L, 2416987738L, 4091088617L, 2483549179L, 107231140L, 591865811L, 1564311799L, 23512612L, 2427645310L, 57369931L, 226099556L, 836255197659803648L, 217031152L, 18796362L, 817084630121779201L, 229199470L, 4879397603L, 3260039275L, 1406453300L, 741590076065501184L, 20068313L, 778982606989910016L, 21129331L, 105104279L, 333265493L, 30199609L, 27837450L, 806917014L, 83785861L, 3461235562L, 18447095L, 614299477L, 1725739801L, 1876698872L, 18803009L, 3373675319L, 2229820519L, 555916903L, 3034284701L, 487515115L, 2597676656L, 3416201399L, 3304766355L, 232382227L, 1350323634L, 24265642L, 749653279630557184L, 559384320L, 878300089L, 72514175L, 2294337954L, 3423649865L, 156635362L, 2326045993L, 75005086L, 28331257L, 4243159019L, 2960381469L, 2938544519L, 4826073173L, 2155915072L, 782851981L, 1433921474L, 2979635170L, 2933434091L, 1159091352L, 3030169520L, 2312716715L, 2889123214L, 394637051L, 2878181861L, 271321132L, 808089998172024832L, 872047290L, 2404433921L, 406578394L, 1187275844L, 534370294L, 379656481L, 4783738763L, 362339392L, 3057563548L, 1527760766L, 46725883L, 833445379039490051L, 911918684607795201L, 37902479L, 1021868336L, 720518367L, 33863096L, 771153540L, 282532238L, 18759580L, 2255424079L, 813732947694067712L, 43288429L, 2878953400L, 2889549597L, 19161627L, 2297877809L, 297838327L, 19061720L, 724991824985731072L, 26005916L, 25053123L, 2375814823L, 746717616916598784L, 580613218L, 840386685384966146L, 764392235320434688L, 19864223L, 104943486L, 371238644L, 2236214974L, 20841592L, 25266533L, 4397198303L, 476764652L, 754760779329638401L, 18829430L, 74749621L, 98212710L, 130571757L, 41846907L, 478930718L, 346795026L, 24859118L, 717037294092423170L, 749664673037950976L, 169424116L, 239034989L, 808594634L, 16324353L, 73100393L, 2893142548L, 455946342L, 3705543556L, 346344101L, 581316692L, 725896819L, 90871042L, 628665187L, 2335152409L, 2538213318L, 1900293397L, 542170497L, 224614992L, 140488453L, 614512530L, 334054650L, 804349892416208896L, 37868481L, 265951489L, 853607562683584514L, 551838506L, 2619196809L, 27842716L, 225817388L, 122105107L, 835457540423094272L, 1724794465L, 192508576L, 3693946403L, 1357201854L, 28634867L, 2294085750L, 608202622L, 29944729L, 23763218L, 704683185L, 2301447301L, 18776278L, 865989777597845506L, 100182732L, 20865466L, 27021309L, 3082531732L, 30633434L, 763669877756456960L, 19240396L, 20202859L, 878800765829120000L, 1093617042L, 27500871L, 2588084084L, 19185125L, 39958883L, 182935271L, 20315636L, 820152458L, 31080756L, 2903893924L, 119351043L, 59731340L, 2348119694L, 3698045056L, 30981659L, 3567291333L, 763411220804280321L, 11858002L, 898585348581863424L, 20582098L, 15029720L, 1531435626L, 1393033250L, 19015055L, 811462749897236482L, 2850060292L, 34743468L, 2370627199L, 4459712902L, 498695121L, 147998374L, 526143685L, 3208027984L, 973260584396427264L, 753812373488607232L, 461476291L, 869857282623975424L, 1970908880L, 892476423826440192L, 2584606664L, 3190906342L, 19566644L, 319147226L, 3054576341L, 974710136L, 338026921L, 570028452L, 334672453L, 4873847764L, 834713675130863619L, 25125441L, 1161300068L, 14948611L, 2157225635L, 1175135413L, 738818917012021248L, 280885197L, 2494293187L, 526517939L, 19445100L, 809053296325496836L, 2172236684L, 1591442466L, 302612407L, 273134386L, 27914274L, 343663197L, 19778134L, 1166961122L, 2921347427L, 1706392436L, 2245574173L, 716550823719911424L, 496050817L, 2742967091L, 3295131167L, 37706685L, 2149053198L, 2776230340L, 510013612L, 19186613L, 241110892L, 20596565L, 2731782747L, 4894263947L, 214447361L, 388330222L, 161673168L, 104229816L, 1922664834L, 842329203181780993L, 27714678L, 980415995629187072L, 2557535953L, 110948272L, 552531226L, 154050557L, 426071524L, 551229082L, 25311688L, 781835440840183808L, 707231479047315456L, 19017675L, 877699123L, 844593559122665473L, 3457675883L, 964095866L, 19236255L, 166350461L, 899371272L, 108046242L, 332457139L, 3003146638L, 382128174L, 454201034L, 796068994054815744L, 272022187L, 132468849L, 34907977L, 925161145L, 963945493L, 219266880L, 47407209L, 2741857108L, 117480668L, 22470605L, 39971453L, 3482872282L, 395542723L, 26981298L, 749656097762447364L, 156193896L, 628660217L, 3187235553L, 2524694150L, 19014898L, 3629980455L, 3333132904L, 800281172L, 390636166L, 121832664L, 61481011L, 2845072718L, 51746591L, 2369244312L, 2660021067L, 980080890L, 18778823L, 2244138606L, 4717892303L, 860592314514886660L, 2914150427L, 20665508L, 18768538L, 22039926L, 749676555081748484L, 1441726944L, 459335145L, 18694252L, 19314018L, 393309650L, 157497762L, 2885965707L, 2455556208L, 891953481896124416L, 137634081L, 1616951270L, 565268225L, 477946503L, 2313725803L, 18898111L, 1715348046L, 1556066857L, 206582058L, 47306468L, 2890850363L, 4234370381L, 516881756L, 834033821628690432L, 776476836L, 1201747669L, 313229624L, 25379961L, 1375062308L, 490276190L, 372142346L, 277384675L, 825739170920484866L, 135489572L, 306370816L, 989684827L, 18838766L, 1097653338L, 17233550L, 763053819580321792L, 3949646303L, 20912700L, 18979562L, 68667032L, 243551360L, 2829792282L, 294065941L, 465482389L, 18941777L, 510223355L, 34504853L, 87302885L, 128176155L, 330178251L, 197825824L, 2316753940L, 1735498316L, 298744792L, 528848733L, 3468263355L, 2163521143L, 3343962053L, 128804116L, 97868744L, 2904898289L, 2436452542L, 22464270L, 804735637630971906L, 871668595L, 2373603537L, 907311171564441601L, 292317698L, 351638843L, 1852238509L, 234807573L, 400001248L, 570196660L, 1635402042L, 19179185L, 2987122179L, 2410963622L, 788830726137475076L, 3840202757L, 592490041L, 214452533L, 18643437L, 25659206L, 18158890L, 1180158356L, 2253169846L, 18976566L, 321362887L, 332901740L, 562261824L, 77147780L, 2386291685L, 11857492L, 97878686L, 3401399728L, 613419622L, 2229113615L, 1382692608L, 4125679233L, 301518835L, 69593413L, 19523359L, 26489325L, 196213234L, 111991054L, 32016073L, 89929673L, 4257655816L, 562903986L, 788401044158083072L, 4481336067L, 155324976L, 347469412L, 2629539781L, 3096914481L, 84310420L, 2315230584L, 2256845427L, 718855606L, 782848264408338432L, 21858579L, 2909959054L, 51133321L, 434733395L, 19333183L, 388125818L, 3304391169L, 893177606748729344L, 2097191L, 594930372L, 27722772L, 832186936857096192L, 4185038309L, 2446938020L, 20921291L, 2811008905L, 222789002L, 3007745019L, 171685261L, 318993474L, 133200254L, 482286374L, 1053311005L, 1114769642L, 921655142L, 1016701483L, 2466809932L, 58419769L, 19496771L, 2352957686L, 1327807772L, 21486473L, 722735762781954049L, 723955390254329857L, 993703645L, 868565738L, 119159588L, 4830085960L, 3363764459L, 2412365100L, 3003988869L, 65617648L, 107414992L, 62018785L, 572867000L, 747555945618767876L, 3430626101L, 104778698L, 28527773L, 878783544L, 182520290L, 1344261205L, 865555320453517315L, 2187103782L, 1658512212L, 2687295422L, 2930098775L, 900460349702496258L, 863870772267364354L, 18642457L, 1196582724L, 25660377L, 2870982137L, 2801618890L, 3429791746L, 122022318L, 749675707870093313L, 152696200L, 123862900L, 900285272298053632L, 1488622058L, 68945032L, 2864221346L, 2660979665L, 31374301L, 4817853640L, 19448284L, 18577082L, 333045778L, 99128675L, 78048238L, 27604754L, 1372835454L, 325468450L, 339107634L, 2653201716L, 47881391L, 841390742387990530L, 769705166L, 198886415L, 53089852L, 89427793L, 24021197L, 392684445L, 3801501L, 4227822587L, 365577229L, 289345749L, 19650143L, 142282561L, 19198381L, 19643874L, 19823951L, 240631769L, 402690401L, 328995303L, 1113942241L, 877431079L, 102276010L, 3325105205L, 563652166L, 1945040929L, 706669183L, 1155051500L, 24715437L, 422692987L, 82465019L, 362444109L, 711164584850276353L, 71507821L, 468372148L, 2942579679L, 87793521L, 834041778L, 2994150045L, 398695170L, 1908879258L, 237648982L, 440818703L, 2159104541L, 49568716L, 3014203738L, 1712174640L, 2295741811L, 3301275581L, 3632177895L, 27856210L, 346025070L, 19247522L, 198871052L, 759613015767613442L, 1477745286L, 910832172310949888L, 245467017L, 391707601L, 303708623L, 606968732L, 21866399L, 18760116L, 24188676L, 754758518541082624L, 68483142L, 893166764443537408L, 23308888L, 2151183954L, 108927409L, 122763720L, 483311585L, 325954026L, 148386719L, 148098242L, 874102699L, 727962411081338880L, 780340604660289536L, 166183793L, 1261508922L, 3201975610L, 1941901813L, 784781140397785088L, 731145817441079296L, 1136834894L, 231410482L, 18759086L, 1048189687L, 130931010L, 847082046L, 299559374L, 19981221L, 3065329706L, 156348820L, 799565034347266049L, 711989507906801664L, 460595966L, 3796501L, 484578210L, 3881319459L, 1469432677L, 139397687L, 3559456575L, 22159604L, 21764525L, 15402649L, 1283306778L, 782077896L, 423559923L, 327359409L, 19284493L, 83603458L, 4307786548L, 140527665L, 813286L, 268492292L, 520288932L, 2386885596L, 555040488L, 143457836L, 199373792L, 1188281468L, 772560784807387136L, 893107425720631296L, 966204836L, 29454622L, 1378966748L, 267740219L, 2479331902L, 47156292L, 1521554240L, 118722303L, 3389992606L, 2396511375L, 146235861L, 2790018288L, 23245616L, 2579025626L, 4829813404L, 19455187L, 3329719133L, 375803930L, 845643132L, 855827449019551744L, 1433723310L, 1243374858L, 18759751L, 200493123L, 2966249284L, 93899982L, 3048723709L, 3472324217L, 812270040649179136L, 152848722L, 512875987L, 3980704157L, 24570378L, 374186312L, 917145523261493249L, 22291443L, 757929379154518016L, 3180476655L, 18722968L, 2853212471L, 717707477287047168L, 714145755909500928L, 83585393L, 706764132184432640L, 587216713L, 636302550L, 121066419L, 47329763L, 754763759688773632L, 751008913416421376L, 723750200L, 154116697L, 561968042L, 393890670L, 2496730760L, 1060258711L, 826609377469665280L, 835799611109425152L, 18761673L, 124239708L, 2962858606L, 3434482251L, 2435618995L, 499230066L, 292331091L, 502997747L, 4777071279L, 18781492L, 111064894L, 29401817L, 422877171L, 19235477L, 31547704L, 278036073L, 1858012890L, 18720634L, 2207916705L, 4611975321L, 1447363795L, 61535665L, 1175517073L, 722064747596812288L, 23444635L, 24874309L, 560277414L, 2231927771L, 581931500L, 2813435230L, 1129361413L, 102496469L, 508586205L, 847803576311312384L, 613309515L, 139186313L, 909057496098189312L, 1067820385L, 87654562L, 752969661000605696L, 3289663197L, 2722177548L, 952437572L, 44098212L, 882653474L, 507156309L, 19853634L, 1368116144L, 3097484633L, 939230172280213504L, 19226961L, 733728918411313157L, 964355762L, 1408413445L, 85777101L, 896335670716878850L, 1956930829L, 186533780L, 282740590L, 118643322L, 25803598L, 18760690L, 1341924050L, 730443494L, 37419686L, 33926493L, 822905954L, 1353568513L, 222759734L, 1670287038L, 783065636L, 1085444816L, 68957817L, 4792927420L, 104783793L)

// COMMAND ----------

twitterIDsToFollow_20180322.size // 893 -  all but Amelia's list that came late

// COMMAND ----------

// this is old stuff leave alone... as text in output cell is needed in future
val twitterIDsToFollow = seedIDs0_20180322.union(ids1).distinct().rdd.map({case Row(val1: Long) => val1}).collect().to[ListBuffer] // first seed accounts used in retro augmentation
twitterIDsToFollow.size

// COMMAND ----------

// MAGIC %md
// MAGIC ### Restarting with SE-bias in September 2

// COMMAND ----------

// this is the account list that was tracked from... to... August 26, 2018 before 0900 hours - somehow the job got killed!!! :(
val twitterIDsThatWereFollowed_From20180322ToBefore201809 = sc.parallelize(Seq(527929885L, 26754159L, 552630315L, 110758131L, 2545009211L, 1701494353L, 514100709L, 18839942L, 2561165431L, 18818550L, 264169218L, 23754741L, 2392343062L, 145539086L, 3061603473L, 215423375L, 18900142L, 506257229L, 2283612444L, 1077817430L, 502796617L, 470313644L, 1011476384L, 2909903733L, 578090036L, 108906498L, 4794976401L, 3254523441L, 800422175261868034L, 41857380L, 377946745L, 321522177L, 2554589383L, 161963297L, 29165164L, 1269314047L, 35209318L, 568088930L, 122078343L, 368777408L, 512403375L, 906096158L, 2924593731L, 437733787L, 1245962396L, 95972673L, 950648755L, 3377426375L, 3804101379L, 2882613629L, 1148390670L, 2393821893L, 35743684L, 2903465373L, 2481987373L, 97217647L, 2964328726L, 19085332L, 113940820L, 2595384512L, 2255251825L, 3394028607L, 722676822308163584L, 2188093454L, 1827722011L, 18559282L, 2200293147L, 18778803L, 346691090L, 2954692619L, 425292193L, 141917431L, 342607637L, 846490691366768640L, 716915545539526656L, 38464227L, 188453927L, 499854916L, 1947525476L, 2898827667L, 894999575433555970L, 359599520L, 2846697609L, 36040217L, 4208658790L, 35717737L, 528890147L, 96089009L, 435854067L, 139127908L, 2416987738L, 4091088617L, 2483549179L, 107231140L, 591865811L, 1564311799L, 23512612L, 2427645310L, 57369931L, 226099556L, 836255197659803648L, 217031152L, 18796362L, 817084630121779201L, 229199470L, 4879397603L, 3260039275L, 1406453300L, 741590076065501184L, 20068313L, 778982606989910016L, 21129331L, 105104279L, 333265493L, 30199609L, 27837450L, 806917014L, 83785861L, 3461235562L, 18447095L, 614299477L, 1725739801L, 1876698872L, 18803009L, 3373675319L, 2229820519L, 555916903L, 3034284701L, 487515115L, 2597676656L, 3416201399L, 3304766355L, 232382227L, 1350323634L, 24265642L, 749653279630557184L, 559384320L, 878300089L, 72514175L, 2294337954L, 3423649865L, 156635362L, 2326045993L, 75005086L, 28331257L, 4243159019L, 2960381469L, 2938544519L, 4826073173L, 2155915072L, 782851981L, 1433921474L, 2979635170L, 2933434091L, 1159091352L, 3030169520L, 2312716715L, 2889123214L, 394637051L, 2878181861L, 271321132L, 808089998172024832L, 872047290L, 2404433921L, 406578394L, 1187275844L, 534370294L, 379656481L, 4783738763L, 362339392L, 3057563548L, 1527760766L, 46725883L, 833445379039490051L, 911918684607795201L, 37902479L, 1021868336L, 720518367L, 33863096L, 771153540L, 282532238L, 18759580L, 2255424079L, 813732947694067712L, 43288429L, 2878953400L, 2889549597L, 19161627L, 2297877809L, 297838327L, 19061720L, 724991824985731072L, 26005916L, 25053123L, 2375814823L, 746717616916598784L, 580613218L, 840386685384966146L, 764392235320434688L, 19864223L, 104943486L, 371238644L, 2236214974L, 20841592L, 25266533L, 4397198303L, 476764652L, 754760779329638401L, 18829430L, 74749621L, 98212710L, 130571757L, 41846907L, 478930718L, 346795026L, 24859118L, 717037294092423170L, 749664673037950976L, 169424116L, 239034989L, 808594634L, 16324353L, 73100393L, 2893142548L, 455946342L, 3705543556L, 346344101L, 581316692L, 725896819L, 90871042L, 628665187L, 2335152409L, 2538213318L, 1900293397L, 542170497L, 224614992L, 140488453L, 614512530L, 334054650L, 804349892416208896L, 37868481L, 265951489L, 853607562683584514L, 551838506L, 2619196809L, 27842716L, 225817388L, 122105107L, 835457540423094272L, 1724794465L, 192508576L, 3693946403L, 1357201854L, 28634867L, 2294085750L, 608202622L, 29944729L, 23763218L, 704683185L, 2301447301L, 18776278L, 865989777597845506L, 100182732L, 20865466L, 27021309L, 3082531732L, 30633434L, 763669877756456960L, 19240396L, 20202859L, 878800765829120000L, 1093617042L, 27500871L, 2588084084L, 19185125L, 39958883L, 182935271L, 20315636L, 820152458L, 31080756L, 2903893924L, 119351043L, 59731340L, 2348119694L, 3698045056L, 30981659L, 3567291333L, 763411220804280321L, 11858002L, 898585348581863424L, 20582098L, 15029720L, 1531435626L, 1393033250L, 19015055L, 811462749897236482L, 2850060292L, 34743468L, 2370627199L, 4459712902L, 498695121L, 147998374L, 526143685L, 3208027984L, 973260584396427264L, 753812373488607232L, 461476291L, 869857282623975424L, 1970908880L, 892476423826440192L, 2584606664L, 3190906342L, 19566644L, 319147226L, 3054576341L, 974710136L, 338026921L, 570028452L, 334672453L, 4873847764L, 834713675130863619L, 25125441L, 1161300068L, 14948611L, 2157225635L, 1175135413L, 738818917012021248L, 280885197L, 2494293187L, 526517939L, 19445100L, 809053296325496836L, 2172236684L, 1591442466L, 302612407L, 273134386L, 27914274L, 343663197L, 19778134L, 1166961122L, 2921347427L, 1706392436L, 2245574173L, 716550823719911424L, 496050817L, 2742967091L, 3295131167L, 37706685L, 2149053198L, 2776230340L, 510013612L, 19186613L, 241110892L, 20596565L, 2731782747L, 4894263947L, 214447361L, 388330222L, 161673168L, 104229816L, 1922664834L, 842329203181780993L, 27714678L, 980415995629187072L, 2557535953L, 110948272L, 552531226L, 154050557L, 426071524L, 551229082L, 25311688L, 781835440840183808L, 707231479047315456L, 19017675L, 877699123L, 844593559122665473L, 3457675883L, 964095866L, 19236255L, 166350461L, 899371272L, 108046242L, 332457139L, 3003146638L, 382128174L, 454201034L, 796068994054815744L, 272022187L, 132468849L, 34907977L, 925161145L, 963945493L, 219266880L, 47407209L, 2741857108L, 117480668L, 22470605L, 39971453L, 3482872282L, 395542723L, 26981298L, 749656097762447364L, 156193896L, 628660217L, 3187235553L, 2524694150L, 19014898L, 3629980455L, 3333132904L, 800281172L, 390636166L, 121832664L, 61481011L, 2845072718L, 51746591L, 2369244312L, 2660021067L, 980080890L, 18778823L, 2244138606L, 4717892303L, 860592314514886660L, 2914150427L, 20665508L, 18768538L, 22039926L, 749676555081748484L, 1441726944L, 459335145L, 18694252L, 19314018L, 393309650L, 157497762L, 2885965707L, 2455556208L, 891953481896124416L, 137634081L, 1616951270L, 565268225L, 477946503L, 2313725803L, 18898111L, 1715348046L, 1556066857L, 206582058L, 47306468L, 2890850363L, 4234370381L, 516881756L, 834033821628690432L, 776476836L, 1201747669L, 313229624L, 25379961L, 1375062308L, 490276190L, 372142346L, 277384675L, 825739170920484866L, 135489572L, 306370816L, 989684827L, 18838766L, 1097653338L, 17233550L, 763053819580321792L, 3949646303L, 20912700L, 18979562L, 68667032L, 243551360L, 2829792282L, 294065941L, 465482389L, 18941777L, 510223355L, 34504853L, 87302885L, 128176155L, 330178251L, 197825824L, 2316753940L, 1735498316L, 298744792L, 528848733L, 3468263355L, 2163521143L, 3343962053L, 128804116L, 97868744L, 2904898289L, 2436452542L, 22464270L, 804735637630971906L, 871668595L, 2373603537L, 907311171564441601L, 292317698L, 351638843L, 1852238509L, 234807573L, 400001248L, 570196660L, 1635402042L, 19179185L, 2987122179L, 2410963622L, 788830726137475076L, 3840202757L, 592490041L, 214452533L, 18643437L, 25659206L, 18158890L, 1180158356L, 2253169846L, 18976566L, 321362887L, 332901740L, 562261824L, 77147780L, 2386291685L, 11857492L, 97878686L, 3401399728L, 613419622L, 2229113615L, 1382692608L, 4125679233L, 301518835L, 69593413L, 19523359L, 26489325L, 196213234L, 111991054L, 32016073L, 89929673L, 4257655816L, 562903986L, 788401044158083072L, 4481336067L, 155324976L, 347469412L, 2629539781L, 3096914481L, 84310420L, 2315230584L, 2256845427L, 718855606L, 782848264408338432L, 21858579L, 2909959054L, 51133321L, 434733395L, 19333183L, 388125818L, 3304391169L, 893177606748729344L, 2097191L, 594930372L, 27722772L, 832186936857096192L, 4185038309L, 2446938020L, 20921291L, 2811008905L, 222789002L, 3007745019L, 171685261L, 318993474L, 133200254L, 482286374L, 1053311005L, 1114769642L, 921655142L, 1016701483L, 2466809932L, 58419769L, 19496771L, 2352957686L, 1327807772L, 21486473L, 722735762781954049L, 723955390254329857L, 993703645L, 868565738L, 119159588L, 4830085960L, 3363764459L, 2412365100L, 3003988869L, 65617648L, 107414992L, 62018785L, 572867000L, 747555945618767876L, 3430626101L, 104778698L, 28527773L, 878783544L, 182520290L, 1344261205L, 865555320453517315L, 2187103782L, 1658512212L, 2687295422L, 2930098775L, 900460349702496258L, 863870772267364354L, 18642457L, 1196582724L, 25660377L, 2870982137L, 2801618890L, 3429791746L, 122022318L, 749675707870093313L, 152696200L, 123862900L, 900285272298053632L, 1488622058L, 68945032L, 2864221346L, 2660979665L, 31374301L, 4817853640L, 19448284L, 18577082L, 333045778L, 99128675L, 78048238L, 27604754L, 1372835454L, 325468450L, 339107634L, 2653201716L, 47881391L, 841390742387990530L, 769705166L, 198886415L, 53089852L, 89427793L, 24021197L, 392684445L, 3801501L, 4227822587L, 365577229L, 289345749L, 19650143L, 142282561L, 19198381L, 19643874L, 19823951L, 240631769L, 402690401L, 328995303L, 1113942241L, 877431079L, 102276010L, 3325105205L, 563652166L, 1945040929L, 706669183L, 1155051500L, 24715437L, 422692987L, 82465019L, 362444109L, 711164584850276353L, 71507821L, 468372148L, 2942579679L, 87793521L, 834041778L, 2994150045L, 398695170L, 1908879258L, 237648982L, 440818703L, 2159104541L, 49568716L, 3014203738L, 1712174640L, 2295741811L, 3301275581L, 3632177895L, 27856210L, 346025070L, 19247522L, 198871052L, 759613015767613442L, 1477745286L, 910832172310949888L, 245467017L, 391707601L, 303708623L, 606968732L, 21866399L, 18760116L, 24188676L, 754758518541082624L, 68483142L, 893166764443537408L, 23308888L, 2151183954L, 108927409L, 122763720L, 483311585L, 325954026L, 148386719L, 148098242L, 874102699L, 727962411081338880L, 780340604660289536L, 166183793L, 1261508922L, 3201975610L, 1941901813L, 784781140397785088L, 731145817441079296L, 1136834894L, 231410482L, 18759086L, 1048189687L, 130931010L, 847082046L, 299559374L, 19981221L, 3065329706L, 156348820L, 799565034347266049L, 711989507906801664L, 460595966L, 3796501L, 484578210L, 3881319459L, 1469432677L, 139397687L, 3559456575L, 22159604L, 21764525L, 15402649L, 1283306778L, 782077896L, 423559923L, 327359409L, 19284493L, 83603458L, 4307786548L, 140527665L, 813286L, 268492292L, 520288932L, 2386885596L, 555040488L, 143457836L, 199373792L, 1188281468L, 772560784807387136L, 893107425720631296L, 966204836L, 29454622L, 1378966748L, 267740219L, 2479331902L, 47156292L, 1521554240L, 118722303L, 3389992606L, 2396511375L, 146235861L, 2790018288L, 23245616L, 2579025626L, 4829813404L, 19455187L, 3329719133L, 375803930L, 845643132L, 855827449019551744L, 1433723310L, 1243374858L, 18759751L, 200493123L, 2966249284L, 93899982L, 3048723709L, 3472324217L, 812270040649179136L, 152848722L, 512875987L, 3980704157L, 24570378L, 374186312L, 917145523261493249L, 22291443L, 757929379154518016L, 3180476655L, 18722968L, 2853212471L, 717707477287047168L, 714145755909500928L, 83585393L, 706764132184432640L, 587216713L, 636302550L, 121066419L, 47329763L, 754763759688773632L, 751008913416421376L, 723750200L, 154116697L, 561968042L, 393890670L, 2496730760L, 1060258711L, 826609377469665280L, 835799611109425152L, 18761673L, 124239708L, 2962858606L, 3434482251L, 2435618995L, 499230066L, 292331091L, 502997747L, 4777071279L, 18781492L, 111064894L, 29401817L, 422877171L, 19235477L, 31547704L, 278036073L, 1858012890L, 18720634L, 2207916705L, 4611975321L, 1447363795L, 61535665L, 1175517073L, 722064747596812288L, 23444635L, 24874309L, 560277414L, 2231927771L, 581931500L, 2813435230L, 1129361413L, 102496469L, 508586205L, 847803576311312384L, 613309515L, 139186313L, 909057496098189312L, 1067820385L, 87654562L, 752969661000605696L, 3289663197L, 2722177548L, 952437572L, 44098212L, 882653474L, 507156309L, 19853634L, 1368116144L, 3097484633L, 939230172280213504L, 19226961L, 733728918411313157L, 964355762L, 1408413445L, 85777101L, 896335670716878850L, 1956930829L, 186533780L, 282740590L, 118643322L, 25803598L, 18760690L, 1341924050L, 730443494L, 37419686L, 33926493L, 822905954L, 1353568513L, 222759734L, 1670287038L, 783065636L, 1085444816L, 68957817L, 4792927420L, 104783793L)).toDF("twitterUserId")

// COMMAND ----------

// leave this cell alone!!! - this is wehre breadth-frst expansion is violated MAthilda-RightPost merger issue - ut correct by heavy-duty retro-augments
// svActiveAccounts are different - so retro-augment is still valid from the ethnographically designed seed set being in both expansions...
val twitterIDsToFollowFrom20180902 = twitterIDsThatWereFollowed_From20180322ToBefore201809.union(svActiveAccounts).distinct
twitterIDsToFollowFrom20180902.count 
// iteration -1:  4074 

// COMMAND ----------

val twitterIDsToFollowFrom20180920 = twitterIDsThatWereFollowed_From20180322ToBefore201809.union(svActiveAccounts).distinct
twitterIDsToFollowFrom20180920.count 
// iteration 0:  3942

// COMMAND ----------

// leave alone: iteration -1
val twitterIDsToFollow = twitterIDsToFollowFrom20180902.rdd.map({case Row(val1: Long) => val1}).collect().to[ListBuffer] // first seed accounts used in retro augmentation
twitterIDsToFollow.size

// COMMAND ----------

val twitterIDsToFollow = twitterIDsToFollowFrom20180920.rdd.map({case Row(val1: Long) => val1}).collect().to[ListBuffer] // first seed accounts used in retro augmentation
twitterIDsToFollow.size

// COMMAND ----------

twitterIDsToFollow.size 
// iteration -1: 4074
// iteration 0: 3942

// COMMAND ----------

twitterIDsToFollowFrom20180920.distinct.count

// COMMAND ----------

// done!!!
//twitterIDsToFollowFrom20180920.write//.mode(SaveMode.Overwrite)
//                              .parquet("dbfs:///datasets/MEP/SE/Streaming/twitterIDsToFollowFrom20180920") // rewriting parquet this is iteration 0; so we can recover from a streaming disaster this time... to justify design

// COMMAND ----------

twitterIDsToFollow.size // iteration 0 from: twitterIDsToFollowFrom20180920 - NOTE twitterIDsToFollowFrom20180920 \intersection twitterIDsToFollowFrom20180902 = twitterIDsThatWereFollowed_From20180322ToBefore201809 i.e., "ethnographically robust"

// COMMAND ----------

/*
val TwitterIdsDirectlyFromCsv = sqlContext.read.format("com.databricks.spark.csv")
                        .option("header", "false")
                        .option("inferSchema", "true")
                        //.load("/FileStore/tables/zfh1e6pj1496399395243/uk_candidates_and_newspapers_ids_unique-d702d.txt")
                        .load("/FileStore/tables/zo6licf21496412465690/candidates_newspapers_bloggers_unique-741bb.txt")
                        .select($"_c0")//.filter($"C1".contains("@"))
                        .rdd.map({case Row(val1: Long) => val1}).collect().to[ListBuffer]
                        */

// COMMAND ----------

display(dbutils.fs.ls("/datasets/MEP/SE/Streaming/2018/08/26/08")) // when last streaming job died

// COMMAND ----------

//dbutils.fs.mkdirs("dbfs:/datasets/MEP/SE/Streaming")

// COMMAND ----------

//raaz's twitter credentials
/*
val MyconsumerKey       = ""
val MyconsumerSecret    = ""
val Mytoken             = ""
val MytokenSecret       = ""
*/
// will delte these after the demo - 401 error!
/* Joakim's?
val MyconsumerKey       = "fo0EEh1tnH8WVJdgJPrZ47wD0"
val MyconsumerSecret    = "86pidNWCdTivVmXobAdAa7hiztG42ZB1OH5vp8hXRGuh47NtW7"
val Mytoken             = "4173723312-QDoojcbX5EJxnYkGiz9TcJDu7BdcuAW1jlebhBg"
val MytokenSecret       = "sQrBlNUra6gpzWUOasNHQnbtkeQTtIW8NcsQcNzFVhO1M"
*/

//raaz's twitter credentials
//GlFZk21xdxbYRibpRbLcEV3M6 is meme-streamer

val MyconsumerKey       = "GlFZk21xdxbYRibpRbLcEV3M6"
val MyconsumerSecret    = "BN3ryBvChy5xng5FiFHem8fQDDJ7lLWzH5KaOPjUI0mtwxzaIF"
val Mytoken             = "4173723312-JhrLJx9i9T5JYcbHSn7znvSsGBsTBCUYFS3Pfh1"
val MytokenSecret       = "Yz5xxeDmAou6R8zxit9ZNWnZSsEfPCe2y8v9sqwF7y8HN"


System.setProperty("twitter4j.oauth.consumerKey", MyconsumerKey)
System.setProperty("twitter4j.oauth.consumerSecret", MyconsumerSecret)
System.setProperty("twitter4j.oauth.accessToken", Mytoken)
System.setProperty("twitter4j.oauth.accessTokenSecret", MytokenSecret)

//val outputDirectoryRoot = "/datasets/MEP/UKElection1974IDsOfNewsPapersAndMPsStreaming"
val outputDirectoryRoot = "/datasets/MEP/SE/Streaming" // for public streams
val batchInterval = 5 // minutes
val timeoutJobLength =  batchInterval * 5

// COMMAND ----------

List.empty

// COMMAND ----------

// ignore this cell
val TwitterStringsOfInterest = sqlContext.read.format("com.databricks.spark.csv")
                        .option("header", "false")
                        .option("inferSchema", "true")
                        .load("/FileStore/tables/twitterStringsOfInterest.csv")
                        .select($"_c0")//.filter($"C1".contains("@"))
                        .rdd.map({case Row(val1: String) => val1}).collect().to[ListBuffer]

// COMMAND ----------

// ignore this cell
val TwitterStringsOfInterest: scala.collection.mutable.ListBuffer[String] = ListBuffer("#val2018","#svpol","#valet2018")//, "den svenska modellen", "islamism","jihadism","djihad","khawarij","khawaridj","kuffar","kafir","Allahs vrede","Guds vrede","helvetets eld","hycklarna","munafiq","brott mot våra bröder och systrar","khilafa","khilafah","muslimer fördrivs","rafida","rafidah","mujahidin","mujahideen","en sann tjänare","vilseledning","Må Allah ge dem seger","Må Allah ge dom seger", "martyr", "martyrer", "shuhada", "blodet från martyrer")


// COMMAND ----------

// ignore this cell
TwitterStringsOfInterest.size // well under 400 as per https://developer.twitter.com/en/docs/tweets/filter-realtime/overview/statuses-filter.html

// COMMAND ----------

// ignore this cell
val MathildasRightPostHashtags: scala.collection.mutable.ListBuffer[String] = ListBuffer("#sd","#sd2018","#afs","#afs2018","#medval18","#medval2018","#migpol","#återvandring","#påriktigt","#sverigebilden","#dethärärmittland","#asylstopp","#massutvisning","#burkaförbud","#massinvandring","#mångkultur","#islamister","#invandring","#sverigebilden","#asylkaos","#folkutbyte","#nognu","#tryggasverige","#detnyalandet","#sverigeåtsvenskarna","#absurdistan","#varinterädda")

// COMMAND ----------

// iteration 0 for Mathilda re-correction to save money
val TwitterStringsOfInterestFrom20180920Raw: scala.collection.mutable.ListBuffer[String] = ListBuffer("#val2018","#svpol","#valet2018", "den svenska modellen", "islamism","jihadism","djihad","khawarij","khawaridj","kuffar","kafir","Allahs vrede","Guds vrede","helvetets eld","hycklarna","munafiq","brott mot våra bröder och systrar","khilafa","khilafah","muslimer fördrivs","rafida","rafidah","mujahidin","mujahideen","en sann tjänare","vilseledning","Må Allah ge dem seger","Må Allah ge dom seger", "martyr", "martyrer", "shuhada", "blodet från martyrer", "#sd","#sd2018","#afs","#afs2018","#medval18","#medval2018","#migpol","#återvandring","#påriktigt","#sverigebilden","#dethärärmittland","#asylstopp","#massutvisning","#burkaförbud","#massinvandring","#mångkultur","#islamister","#invandring","#sverigebilden","#asylkaos","#folkutbyte","#nognu","#tryggasverige","#detnyalandet","#sverigeåtsvenskarna","#absurdistan","#varinterädda")

// COMMAND ----------

TwitterStringsOfInterestFrom20180920Raw.size

// COMMAND ----------

TwitterStringsOfInterestFrom20180920Raw.distinct.size

// COMMAND ----------

val TwitterStringsOfInterestFrom20180920 = TwitterStringsOfInterestFrom20180920Raw.distinct

// COMMAND ----------

TwitterStringsOfInterestFrom20180920.size

// COMMAND ----------

twitterIDsToFollow.size // well under 5000

// COMMAND ----------

// leave cell alone!
twitterIDsToFollow.size // well under 5000

// COMMAND ----------

svTTTsDFAllFromParquet.unpersist

// COMMAND ----------

outputDirectoryRoot

// COMMAND ----------

import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

var newContextCreated = false
var numTweetsCollected = 0L // track number of tweets collected
//val conf = new SparkConf().setAppName("TrackedTweetCollector").setMaster("local")
// This is the function that creates the SteamingContext and sets up the Spark Streaming job.
def streamFunc(): StreamingContext = {
  // Create a Spark Streaming Context.
  val ssc = new StreamingContext(sc, Minutes(batchInterval))
  // Create a Twitter Stream for the input source. 
  val auth = Some(new OAuthAuthorization(new ConfigurationBuilder().build()))
  
  //val track = List("@Delvix777-hahaha-JoakimRules")// just added for some live tests from @asutopia,"Trump2016", "#MakeAmericaGreatAgain", "Donald Trump","#lovetrumpshate") 
  //val track = List.empty 
  val track = TwitterStringsOfInterestFrom20180920 //TwitterStringsOfInterest
  val follow = twitterIDsToFollow //UKBuffListimport scala.collection.mutable.ListBuffer
  //val follow = List.empty
  val twitterStream = ExtendedTwitterUtils.createStream(ssc, auth, track, follow)
  val twitterStreamJson = twitterStream.map(x => { val gson = new Gson();
                                                 val xJson = gson.toJson(x)
                                                 xJson
                                               }) 
 
val partitionsEachInterval = 1 // This tells the number of partitions in each RDD of tweets in the DStream.

twitterStreamJson.foreachRDD((rdd, time) => { // for each filtered RDD in the DStream
      val count = rdd.count()
      if (count > 0) {
        val outputRDD = rdd.repartition(partitionsEachInterval) // repartition as desired
        ////outputRDD.saveAsTextFile(s"${outputDirectory}/tweets_" + time.milliseconds.toString) // save as textfile
        //outputRDD.saveAsTextFile(outputDirectoryRoot + "/tweets_" + time.milliseconds.toString) // save as textfile in s3
        // to write to parquet directly in append mode as one file------------
        
        val outputDF = outputRDD.toDF("tweetAsJsonString")
        val year = (new java.text.SimpleDateFormat("yyyy")).format(new java.util.Date())
        val month = (new java.text.SimpleDateFormat("MM")).format(new java.util.Date())
        val day = (new java.text.SimpleDateFormat("dd")).format(new java.util.Date())
        val hour = (new java.text.SimpleDateFormat("HH")).format(new java.util.Date())
        outputDF.write.mode(SaveMode.Append).parquet(outputDirectoryRoot+ "/"+ year + "/" + month + "/" + day + "/" + hour + "/" + time.milliseconds) 
        // end of writing as parquet file-------------------------------------
        numTweetsCollected += count // update with the latest count
      }
  })
  newContextCreated = true
  ssc
}

// COMMAND ----------

val ssc = StreamingContext.getActiveOrCreate(streamFunc)

// COMMAND ----------

ssc.start() // Raaz spent 3.5 hours to restart this - please no more changes in design space.... until first week of October
//ssc.awaitTerminationOrTimeout(timeoutJobLength) // you only need one of these to start

// COMMAND ----------

// this will make sure all streaming job in the cluster are stopped
//StreamingContext.getActive.foreach{ _.stop(stopSparkContext = false) } 

// COMMAND ----------

//val tweetsRawDFfollowers = sqlContext.read.parquet("dbfs:/datasets/MEP/AllGroupsStreaming/2016/10/14/07/*")
//tweetsRawDFFollowers.cache()
//tweetsRawDFfollowers.count()

// COMMAND ----------

//display(dbutils.fs.ls(outputDirectoryRoot))

// COMMAND ----------

//dbutils.fs.rm("/datasets/MEP/AllGroupsStreaming", true)

// COMMAND ----------

// MAGIC %md
// MAGIC ## Exploring output in TwitterStreamingNZMPsEDA notebook

// COMMAND ----------

// MAGIC %run scalable-data-science/meme-evolution/db/src2run/TTTDFfunctions

// COMMAND ----------

display(dbutils.fs.ls("/datasets/MEP/SE/Streaming/2018"))

// COMMAND ----------

import scala.collection.mutable.ListBufferval 
rawDF = fromParquetFile2DF("/datasets/MEP/SE/Streaming/2018/*/*/*/*/*") //.cache()
val TTTsDF = tweetsDF2TTTDF(tweetsJsonStringDF2TweetsDF(rawDF)).cache()

// COMMAND ----------

import scala.collection.mutable.ListBufferval rawDF = fromParquetFile2DF(s"/mnt/$MountName/datasets/MEP/USandSEExtremistsAndSEMPsStreaming/2017/*/*/*/*/*") //.cache()
val TTTsDF = tweetsDF2TTTDF(tweetsJsonStringDF2TweetsDF(rawDF)).cache()

// COMMAND ----------

TTTsDF.count()

// COMMAND ----------

TTTsDF.write.mode(SaveMode.Overwrite).parquet(s"/mnt/$MountName/datasets/MEP/USandSEExtremistsAndSEMPsStreaming/2017/0304TTTsDF")

// COMMAND ----------

display(TTTsDF.groupBy($"tweetType").count().orderBy($"count".desc))

// COMMAND ----------

TTTsDF.printSchema

// COMMAND ----------

display(TTTsDF)

// COMMAND ----------

display(TTTsDF.select("CurrentTweetDate", "CurrentTwID", "TweetType","CurrentTweet","CPostuserSN","OPostUserSNinRT", "OPostUserSNinQT", "OPostUserSNinReply",  "friendsCount","followersCount","favouritesCount").orderBy($"CurrentTweetDate"))

// COMMAND ----------

